{"version":3,"file":"index.esm.js","sources":["../src/query.ts","../src/context.tsx","../src/hooks/useClient.ts","../src/hooks/useQuery.ts","../src/hooks/useFetcher.ts","../src/hooks/useSelect.ts","../src/hooks/useSelectSingle.ts","../src/hooks/useSelectMaybeSingle.ts","../src/hooks/useSession.ts"],"sourcesContent":["import { Count, Filter } from './types';\n\nexport type QueryConfig<Data> = {\n  columns?: string,\n  filter?: Filter<Data>,\n  count?: Count,\n  head?: boolean,\n};\nexport type Query<Data> = [string, QueryConfig<Data>];\nexport const createQuery = <Data>(\n  table: string,\n  config: QueryConfig<Data>,\n): Query<Data> => [table, config];\n","import { createContext } from 'react';\nimport { SupabaseClient } from '@supabase/supabase-js';\n\nconst Context = createContext<SupabaseClient>(null);\n\nexport default Context;\n","import { SupabaseClient } from '@supabase/supabase-js';\nimport { useContext } from 'react';\nimport Context from '../context';\n\nconst useClient = (): SupabaseClient => {\n  const client = useContext(Context);\n  if (!client) throw new Error('supabase client instance required');\n  return client;\n};\n\nexport default useClient;\n","import { useMemo } from 'react';\nimport { createQuery, Query, QueryConfig } from '../query';\n\nconst useQuery = <Data>(\n  table: string,\n  config: QueryConfig<Data>,\n  deps: any[],\n): Query<Data> => useMemo(() => createQuery(table, config), deps);\n\nexport default useQuery;\n","import { useMemo } from 'react';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { PostgrestSingleSuccessResponse, PostgrestSuccessResponse } from '../types';\nimport useClient from './useClient';\nimport { QueryConfig } from '../query';\n\nexport type Fetcher<Data> = (\n  table: string,\n  config: QueryConfig<Data>,\n) => Promise<PostgrestSuccessResponse<Data>>;\nexport type FetcherSingle<Data> = (\n  table: string,\n  config: QueryConfig<Data>,\n) => Promise<PostgrestSingleSuccessResponse<Data>>;\n\ntype FetcherType = 'multiple' | 'single' | 'maybeSingle' | 'csv';\n\nfunction createFetcher<Data>(client: SupabaseClient, type: 'multiple'): Fetcher<Data>;\nfunction createFetcher<Data>(client: SupabaseClient, type: 'single'): FetcherSingle<Data>;\nfunction createFetcher<Data>(client: SupabaseClient, type: 'maybeSingle'): FetcherSingle<Data | null>;\nfunction createFetcher(client: SupabaseClient, type: 'csv'): FetcherSingle<string>;\nfunction createFetcher(client: SupabaseClient, type: FetcherType) {\n  return async (\n    table: string, config: QueryConfig<any>,\n  ) => {\n    const select = client.from(table).select(config.columns, {\n      count: config.count,\n      head: config.head,\n    });\n    const hasFilter = typeof config.filter === 'function';\n    const query = hasFilter ? config.filter(select) : select;\n    switch (type) {\n      default:\n      case 'multiple':\n        return query.throwOnError();\n      case 'single':\n        // @ts-ignore\n        return query.throwOnError().single();\n      case 'maybeSingle':\n        // @ts-ignore\n        return query.throwOnError().maybeSigle();\n      case 'csv':\n        // @ts-ignore\n        return query.throwOnError().csv();\n    }\n  };\n}\n\nfunction useFetcher<Data>(type: 'multiple'): Fetcher<Data>;\nfunction useFetcher<Data>(type: 'single'): FetcherSingle<Data>;\nfunction useFetcher<Data>(type: 'maybeSingle'): FetcherSingle<Data | null>;\nfunction useFetcher(type: 'csv'): FetcherSingle<string>;\nfunction useFetcher(type: FetcherType) {\n  const client = useClient();\n  return useMemo(() => createFetcher(client, type as any), [client, type]) as any;\n}\n\nexport default useFetcher;\n","import useSWR, { SWRConfiguration, SWRResponse } from 'swr';\nimport { PostgrestError, PostgrestSuccessResponse } from '../types';\nimport useFetcher from './useFetcher';\nimport { Query } from '../query';\n\nconst useSelect = <Data>(\n  query: Query<Data>, swrConfig: Omit<SWRConfiguration, 'fetcher'>,\n): SWRResponse<PostgrestSuccessResponse<Data>, PostgrestError> => {\n  const fetcher = useFetcher<Data>('multiple');\n  return useSWR(query, fetcher, swrConfig);\n};\n\nexport default useSelect;\n","import useSWR, { SWRConfiguration, SWRResponse } from 'swr';\nimport { PostgrestError, PostgrestSingleSuccessResponse } from '../types';\nimport { Query } from '../query';\nimport useFetcher from './useFetcher';\n\nconst useSelectSingle = <Data>(\n  query: Query<Data>, swrConfig: Omit<SWRConfiguration, 'fetcher'>,\n): SWRResponse<PostgrestSingleSuccessResponse<Data>, PostgrestError> => {\n  const fetcher = useFetcher<Data>('single');\n  return useSWR(query, fetcher, swrConfig);\n};\n\nexport default useSelectSingle;\n","import useSWR, { SWRConfiguration, SWRResponse } from 'swr';\nimport { PostgrestError, PostgrestSuccessResponse } from '../types';\nimport useFetcher from './useFetcher';\nimport { Query } from '../query';\n\nconst useSelectMaybeSingle = <Data>(\n  query: Query<Data>, swrConfig: Omit<SWRConfiguration, 'fetcher'>,\n): SWRResponse<PostgrestSuccessResponse<Data>, PostgrestError> => {\n  const fetcher = useFetcher<Data>('maybeSingle');\n  return useSWR(query, fetcher, swrConfig);\n};\n\nexport default useSelectMaybeSingle;\n","import { useEffect, useState } from 'react';\nimport { Session } from '@supabase/supabase-js';\nimport useClient from './useClient';\n\nconst useSession = (): Session | null => {\n  const client = useClient();\n  const [session, setSession] = useState<Session>(client.auth.session());\n  useEffect(() => {\n    const {\n      data: subscription,\n    } = client.auth.onAuthStateChange((_, newSession) => {\n      setSession(newSession);\n    });\n    return () => subscription.unsubscribe();\n  }, [setSession, client]);\n  return session;\n};\n\nexport default useSession;\n"],"names":["createQuery","table","config","Context","createContext","useClient","client","useContext","Error","useQuery","deps","useMemo","useFetcher","type","select","from","columns","count","head","query","filter","throwOnError","single","maybeSigle","csv","createFetcher","useSelect","swrConfig","fetcher","useSWR","useSelectSingle","useSelectMaybeSingle","useSession","useState","auth","session","setSession","useEffect","subscription","onAuthStateChange","_","newSession","data","unsubscribe"],"mappings":"mHASaA,IAAAA,EAAc,SACzBC,EACAC,SACgB,CAACD,EAAOC,ICTpBC,EAAUC,EAA8B,MCCxCC,EAAY,WAChB,IAAMC,EAASC,EAAWJ,GAC1B,IAAKG,EAAQ,UAAUE,MAAM,qCAC7B,OAAOF,GCJHG,EAAW,SACfR,EACAC,EACAQ,UACgBC,EAAQ,kBAAMX,EAAYC,EAAOC,IAASQ,IC6C5D,SAASE,EAAWC,GAClB,IAAMP,EAASD,IACf,OAAOM,EAAQ,kBAjCjB,SAAuBL,EAAwBO,GAC7C,gBACEZ,EAAeC,OAEf,IAAMY,EAASR,EAAOS,KAAKd,GAAOa,OAAOZ,EAAOc,QAAS,CACvDC,MAAOf,EAAOe,MACdC,KAAMhB,EAAOgB,OAGTC,EADqC,mBAAlBjB,EAAOkB,OACNlB,EAAOkB,OAAON,GAAUA,EAClD,OAAQD,GACN,QACA,IAAK,WACH,uBAAOM,EAAME,gBACf,IAAK,SAEH,uBAAOF,EAAME,eAAeC,UAC9B,IAAK,cAEH,uBAAOH,EAAME,eAAeE,cAC9B,IAAK,MAEH,uBAAOJ,EAAME,eAAeG,QArBlC,oCAgCqBC,CAAcnB,EAAQO,IAAc,CAACP,EAAQO,ICjD9Da,IAAAA,EAAY,SAChBP,EAAoBQ,GAEpB,IAAMC,EAAUhB,EAAiB,YACjC,OAAOiB,EAAOV,EAAOS,EAASD,ICJ1BG,EAAkB,SACtBX,EAAoBQ,GAEpB,IAAMC,EAAUhB,EAAiB,UACjC,OAAOiB,EAAOV,EAAOS,EAASD,ICJ1BI,EAAuB,SAC3BZ,EAAoBQ,GAEpB,IAAMC,EAAUhB,EAAiB,eACjC,OAAOiB,EAAOV,EAAOS,EAASD,ICL1BK,EAAa,WACjB,IAAM1B,EAASD,MACe4B,EAAkB3B,EAAO4B,KAAKC,WAArDA,OAASC,OAShB,OARAC,EAAU,WACR,IACQC,EACJhC,EAAO4B,KAAKK,kBAAkB,SAACC,EAAGC,GACpCL,EAAWK,KAFXC,KAIF,yBAAaJ,EAAaK,gBACzB,CAACP,EAAY9B,IACT6B"}